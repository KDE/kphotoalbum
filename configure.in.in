# -- Check for KDE 3.1 and enable the compat dir --------------------
AC_LANG_SAVE
AC_LANG_CPLUSPLUS

AC_MSG_CHECKING([for kdelibs newer than 3.1.x])

kcompat_save_CXXFLAGS="$CXXFLAGS"
kcompat_safe_LIBS="$LIBS"
LIBS="$LIBS $X_EXTRA_LIBS"
if test "$GXX" = "yes"; then
CXXFLAGS="$CXXFLAGS $all_includes"
fi

kimdaba_need_compat=
AC_TRY_COMPILE([
#include <kdeversion.h>
#if !( KDE_IS_VERSION( 3, 1, 90 ) )
#error Need to enable libkimdaba/compat/
#endif
],
[
],
	AC_MSG_RESULT(yes)
,
	kimdaba_need_compat=yes
	AC_MSG_RESULT(no)
)
CXXFLAGS="$kcompat_save_CXXFLAGS"
LIBS="$kcompat_safe_LIBS"

AM_CONDITIONAL(compile_LIBKIMDABA_COMPAT, test -n "$kimdaba_need_compat")

AC_LANG_RESTORE
# -- End KDE 3.1 check ----------------------------------------------


# Add these flags only when compiling for KDE 3.2.x and above.
if test -z "$kimdaba_need_compat"; then
  KIMDABA_CXXFLAGS="-DQT_NO_CAST_ASCII -DQT_CAST_NO_ASCII"
fi
AC_SUBST(KIMDABA_CXXFLAGS)

# -------------------------------------------------- KIPI Check
KDE_CHECK_HEADER(libkipi/interface.h,  have_kipi=yes,  have_kipi=no)

if test "$have_kipi" = "no"; then
  AC_MSG_WARN([Can't find KIPI (KDE Image Plugin Interface), compiling without]);  
else
   KIMDABA_KIPI_CXXFLAGS="-DHASKIPI"
fi
AC_SUBST(KIMDABA_KIPI_CXXFLAGS)

AM_CONDITIONAL(HAVE_KIPI, test "$have_kipi" = "yes")

